// <auto-generated />
using System;
using CryptoIndicatorAlerts.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CryptoIndicatorAlerts.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20190605204554_SettingsFormModel")]
    partial class SettingsFormModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CryptoIndicatorAlerts.Models.AssetPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseName");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("QuoteName");

                    b.HasKey("Id");

                    b.ToTable("AssetPairs");
                });

            modelBuilder.Entity("CryptoIndicatorAlerts.Models.EMA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetPairId");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(9,8)");

                    b.Property<DateTime>("CloseTime");

                    b.Property<long>("CloseTimeUnix");

                    b.Property<decimal>("EMACalc")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("Interval");

                    b.Property<int>("Length");

                    b.Property<decimal?>("MACD")
                        .HasColumnType("decimal(7,6)");

                    b.Property<DateTime>("OpenTime");

                    b.Property<long>("OpenTimeUnix");

                    b.Property<decimal?>("Signal")
                        .HasColumnType("decimal(7, 6)");

                    b.HasKey("Id");

                    b.HasIndex("AssetPairId");

                    b.ToTable("EMAs");
                });

            modelBuilder.Entity("CryptoIndicatorAlerts.Models.MACD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetPairId");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(9,8)");

                    b.Property<decimal>("EMA_12")
                        .HasColumnType("decimal(9,8)");

                    b.Property<decimal?>("EMA_26")
                        .HasColumnType("decimal(9,8)");

                    b.Property<string>("Interval");

                    b.Property<decimal?>("MACD_Calc")
                        .HasColumnType("decimal(9,8)");

                    b.Property<DateTime>("OpenTime");

                    b.Property<long>("OpenTimeUnix");

                    b.Property<decimal?>("Signal")
                        .HasColumnType("decimal(9,8)");

                    b.HasKey("Id");

                    b.HasIndex("AssetPairId");

                    b.ToTable("MACDs");
                });

            modelBuilder.Entity("CryptoIndicatorAlerts.Models.RSI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetPairId");

                    b.Property<decimal?>("AvgGain")
                        .HasColumnType("decimal(9,8)");

                    b.Property<decimal?>("AvgLoss")
                        .HasColumnType("decimal(9,8)");

                    b.Property<decimal?>("Change")
                        .HasColumnType("decimal(9,8)");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(9,8)");

                    b.Property<DateTime>("CloseTime");

                    b.Property<long>("CloseTimeUnix");

                    b.Property<decimal?>("Gain")
                        .HasColumnType("decimal(9,8)");

                    b.Property<string>("Interval");

                    b.Property<decimal?>("Loss")
                        .HasColumnType("decimal(9,8)");

                    b.Property<DateTime>("OpenTime");

                    b.Property<long>("OpenTimeUnix");

                    b.Property<decimal?>("RS")
                        .HasColumnType("decimal(9,8)");

                    b.Property<decimal?>("RSICalc")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("AssetPairId");

                    b.ToTable("RSIs");
                });

            modelBuilder.Entity("CryptoIndicatorAlerts.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetPairId");

                    b.Property<bool>("EMA1_Enable");

                    b.Property<string>("EMA1_Time");

                    b.Property<bool>("EMA2_Enable");

                    b.Property<int>("EMA2_Long");

                    b.Property<int>("EMA2_Med");

                    b.Property<int>("EMA2_Short");

                    b.Property<string>("EMA2_Time");

                    b.Property<bool>("EMA3_Enable");

                    b.Property<int>("EMA3_Long");

                    b.Property<int>("EMA3_Med");

                    b.Property<int>("EMA3_Short");

                    b.Property<string>("EMA3_Time");

                    b.Property<int>("EMA_Long");

                    b.Property<int>("EMA_Med");

                    b.Property<int>("EMA_Short");

                    b.Property<string>("MACD_1");

                    b.Property<string>("MACD_2");

                    b.Property<string>("MACD_3");

                    b.Property<bool>("MACD_Enable");

                    b.Property<bool>("MovingAvg1_Enable");

                    b.Property<string>("MovingAvg1_Long");

                    b.Property<string>("MovingAvg1_Med");

                    b.Property<string>("MovingAvg1_Short");

                    b.Property<string>("MovingAvg1_Time");

                    b.Property<bool>("MovingAvg2_Enable");

                    b.Property<int>("MovingAvg2_Long");

                    b.Property<int>("MovingAvg2_Med");

                    b.Property<int>("MovingAvg2_Short");

                    b.Property<string>("MovingAvg2_Time");

                    b.Property<bool>("MovingAvg3_Enable");

                    b.Property<int>("MovingAvg3_Long");

                    b.Property<int>("MovingAvg3_Med");

                    b.Property<int>("MovingAvg3_Short");

                    b.Property<string>("MovingAvg3_Time");

                    b.Property<string>("RSI_1");

                    b.Property<string>("RSI_2");

                    b.Property<string>("RSI_3");

                    b.Property<bool>("RSI_Enable");

                    b.Property<string>("VolMA");

                    b.HasKey("Id");

                    b.HasIndex("AssetPairId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("CryptoIndicatorAlerts.Models.EMA", b =>
                {
                    b.HasOne("CryptoIndicatorAlerts.Models.AssetPair", "AssetPair")
                        .WithMany()
                        .HasForeignKey("AssetPairId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoIndicatorAlerts.Models.MACD", b =>
                {
                    b.HasOne("CryptoIndicatorAlerts.Models.AssetPair", "AssetPair")
                        .WithMany()
                        .HasForeignKey("AssetPairId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoIndicatorAlerts.Models.RSI", b =>
                {
                    b.HasOne("CryptoIndicatorAlerts.Models.AssetPair", "AssetPair")
                        .WithMany("RSIs")
                        .HasForeignKey("AssetPairId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoIndicatorAlerts.Models.Settings", b =>
                {
                    b.HasOne("CryptoIndicatorAlerts.Models.AssetPair", "AssetPair")
                        .WithMany()
                        .HasForeignKey("AssetPairId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
